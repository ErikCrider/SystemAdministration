<#
Create a list of all servers with files in the RecycleBin older than X days. Set the variable "$DaysOld" to the desired date range
This script gets all servers in Active Directory with "Windows Server" in the OperatingSystem attribute and then checks if it can ping the server.
If the server is pingable it will attempt to get files older than the set time period and then output this to a file
This output file can be paired with the modified powershell script Get-RecycleBinSizeXDays.ps1 that is in this repository
Unreachable servers are kept in the variable "$BadServerList" if you need to review those.

Author: Erik Crider
Date:	11/03/2020

Update: 12/22/2020
Added status updates within sections and progress bar to main portion of script
Added error handling for most errors
#>

$DaysOld = "-60"

##  Gather all servers, output to a file
$date = (get-date -uformat "%m-%d-%Y-%R" | ForEach-Object { $_ -replace ":", "." }) 
$Servers = "c:\temp\RecycleBin-" + $Date+'.txt' 
write-host "Gathering list of servers from AD"
Get-ADComputer -Filter {( OperatingSystem -Like '*Windows Server*') } | sort name | select -expandproperty name | Out-File $Servers



##  Variables to be used to hold data in the script below
$dataColl = @()
$GoodServerList = @()
$BadServerList = @()
$ServerList = Get-content $servers

##  Attempt to ping each server in the list, separate into two variables with only the pingable servers going forward
write-host "Attempting to ping servers"
foreach ($serverName in $Serverlist){
If (test-connection -ComputerName $servername -Quiet -Count 1){
$GoodServerList += $Servername
} else {
$BadServerList +=$servername}
}


foreach ($srv in $goodserverlist)
{
$drives = Get-WmiObject -Class Win32_LogicalDisk -Filter "DriveType = 3" -ComputerName $Srv -ErrorAction silentlycontinue 
foreach ($drive in $drives)
{
$path = "\\" + $srv + "\" + $drive.DeviceID.Replace(":","$") + '\$Recycle.Bin'
if (test-path $path){
$dirSize = Get-ChildItem $path -recurse -force -ErrorAction silentlycontinue |  Where-Object {($_.LastWriteTime -lt (Get-Date).AddDays($DaysOld))} | select Length |Measure-Object -Sum length  -ErrorAction silentlycontinue 
if ($dirSize.sum){
$dirSize.sum = $dirSize.sum/1MB
$finalResult = "{0:N2}" -f $dirSize.sum
$Driveletter = $Drive.deviceID
$dataObject = New-Object PSObject
Add-Member -inputObject $dataObject -memberType NoteProperty -name "ServerName" -value $srv
Add-Member -inputObject $dataObject -memberType NoteProperty -name "DriveLetter" -value $DriveLetter
Add-Member -inputObject $dataObject -memberType NoteProperty -name "Dir_Size_in_MB" -value $finalResult
$dataColl += $dataObject 
$dataObject
} else {
write-host "$path has no files older than $daysold days old"
}

}else{
write-host "$path not found or not accessible"
}
}
[int]$DevcurrentItem = [array]::indexof($Goodserverlist,$srv)
Write-Progress -Activity "Getting Recycle Bins" -Status "Device $($DevcurrentItem) of $($Goodserverlist.Count - 1) - $([math]::round((($DevcurrentItem + 1)/$Goodserverlist.Count),2) * 100)%  - Currently checking - $($srv)" -PercentComplete $([float](($DevcurrentItem + 1)/$Goodserverlist.Count) * 100)
}



$ExportResults = "c:\temp\RecycleBinResults-" + $Date+'.csv' 
$dataColl | export-csv $ExportResults -notypeinformation
write-host "Report of servers and Recyclebin sizes is in $ExportResults"


$Dedup = Import-csv -Path $ExportResults
$DedupGTzero = $dedup | where {$_.Dir_Size_in_MB -gt 0}
$Uniques = $DedupGTzero.servername | Get-Unique
$UniqueServers = "c:\temp\RecycleBinServers-" + $Date+'.txt'
$Uniques | sort servername | export-csv $UniqueServers

write-host "List of unique servers with files to be deleted in $UniqueServers"
write-host "Use in next step with the following example code"
write-host "Import-module c:\temp\Get-RecycleBinSize60Days.ps1"
write-host "Foreach (`$Server in (get-content $uniqueservers)) {"
write-host 'Get-RecycleBinSize60Days -ComputerName $Server -empty}'

